   Compiling mantra-dex-sdk v0.1.0 (/root/workspace/desamtralized/tui-mantra-dex-sdk)
warning: unused import: `LoadingState`
 --> src/tui/screens/admin.rs:7:16
  |
7 |     app::{App, LoadingState},
  |                ^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Decimal` and `Uint128`
  --> src/tui/screens/admin.rs:12:20
   |
12 | use cosmwasm_std::{Decimal, Uint128};
   |                    ^^^^^^^  ^^^^^^^

warning: unused import: `fee::PoolFee`
  --> src/tui/screens/admin.rs:13:22
   |
13 | use mantra_dex_std::{fee::PoolFee, pool_manager::PoolType};
   |                      ^^^^^^^^^^^^

warning: unused import: `Clear`
  --> src/tui/screens/admin.rs:18:37
   |
18 |     widgets::{Block, Borders, Cell, Clear, Gauge, Padding, Paragraph, Row, Table, Wrap},
   |                                     ^^^^^

warning: unused import: `render_progress_dashboard`
  --> src/tui/screens/dashboard.rs:10:43
   |
10 |             render_network_sync_progress, render_progress_dashboard,
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Gauge`
  --> src/tui/screens/dashboard.rs:22:31
   |
22 |     widgets::{Block, Borders, Gauge, List, ListItem, Padding, Paragraph, Wrap},
   |                               ^^^^^

warning: unused import: `navigation::render_navigation`
 --> src/tui/screens/wizard.rs:9:32
  |
9 |         header::render_header, navigation::render_navigation, status_bar::render_status_bar,
  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Interval`
  --> src/tui/utils/async_ops.rs:11:29
   |
11 | use tokio::time::{interval, Interval};
   |                             ^^^^^^^^

warning: unused import: `Padding`
 --> src/tui/utils/responsive.rs:8:31
  |
8 |     widgets::{Block, Borders, Padding, Paragraph},
  |                               ^^^^^^^

warning: unused variable: `address`
    --> src/tui/app.rs:1959:29
     |
1959 |                 if let Some(address) = &self.state.wallet_address.clone() {
     |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `address`
    --> src/tui/app.rs:2170:21
     |
2170 |         if let Some(address) = &self.state.wallet_address.clone() {
     |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`

warning: unused variable: `address`
   --> src/tui/utils/async_ops.rs:659:42
    |
659 |     pub async fn refresh_balances(&self, address: &str) -> Result<(), Error> {
    |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address`

warning: unused variable: `client`
   --> src/tui/utils/async_ops.rs:679:17
    |
679 |             let client = Arc::clone(&self.client);
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

error[E0308]: mismatched types
   --> src/tui/screens/swap.rs:283:56
    |
283 |                 let input_request = InputRequest::from(key);
    |                                     ------------------ ^^^ expected `InputRequest`, found `KeyEvent`
    |                                     |
    |                                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:587:8
    |
587 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> src/tui/screens/swap.rs:284:20
    |
284 |                 if self.from_amount_input.handle_input(input_request) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Option<StateChanged>`
    |
    = note: expected type `bool`
               found enum `std::option::Option<StateChanged>`
help: use `Option::is_some` to test if the `Option` has a value
    |
284 |                 if self.from_amount_input.handle_input(input_request).is_some() {
    |                                                                      ++++++++++

error[E0308]: mismatched types
   --> src/tui/screens/swap.rs:292:56
    |
292 |                 let input_request = InputRequest::from(key);
    |                                     ------------------ ^^^ expected `InputRequest`, found `KeyEvent`
    |                                     |
    |                                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:587:8
    |
587 |     fn from(value: T) -> Self;
    |        ^^^^

error[E0308]: mismatched types
   --> src/tui/screens/swap.rs:293:20
    |
293 |                 if self.slippage_input.handle_input(input_request) {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Option<StateChanged>`
    |
    = note: expected type `bool`
               found enum `std::option::Option<StateChanged>`
help: use `Option::is_some` to test if the `Option` has a value
    |
293 |                 if self.slippage_input.handle_input(input_request).is_some() {
    |                                                                   ++++++++++

warning: unused variable: `progress`
  --> src/tui/components/status_bar.rs:34:22
   |
34 |             message, progress, ..
   |                      ^^^^^^^^-
   |                      |
   |                      help: try removing the field

warning: variable does not need to be mutable
   --> src/tui/screens/multihop.rs:134:13
    |
134 |         let mut to_token_dropdown = Dropdown::new("To Token").required();
    |             ----^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `input`
   --> src/tui/screens/swap.rs:317:36
    |
317 |     pub fn handle_input(&mut self, input: InputRequest) -> bool {
    |                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `main_area`
   --> src/tui/ui.rs:224:9
    |
224 |     let main_area = content_chunks[0];
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_main_area`

warning: unused variable: `start_time`
   --> src/tui/utils/async_ops.rs:165:29
    |
165 |                         let start_time = std::time::Instant::now();
    |                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

warning: unused variable: `start_time`
   --> src/tui/utils/async_ops.rs:320:29
    |
320 |                         let start_time = std::time::Instant::now();
    |                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

warning: variable `retry_count` is assigned to, but never used
   --> src/tui/utils/async_ops.rs:323:33
    |
323 |                         let mut retry_count = 0;
    |                                 ^^^^^^^^^^^
    |
    = note: consider using `_retry_count` instead

warning: value assigned to `retry_count` is never read
   --> src/tui/utils/async_ops.rs:326:29
    |
326 | ...                   retry_count = attempt;
    |                       ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `client`
   --> src/tui/utils/async_ops.rs:428:13
    |
428 |         let client = Arc::clone(&self.client);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

warning: unused variable: `client`
   --> src/tui/utils/async_ops.rs:519:13
    |
519 |         let client = Arc::clone(&self.client);
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_client`

For more information about this error, try `rustc --explain E0308`.
warning: `mantra-dex-sdk` (lib) generated 23 warnings
error: could not compile `mantra-dex-sdk` (lib) due to 4 previous errors; 23 warnings emitted
