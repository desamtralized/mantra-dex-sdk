---
description:
globs:
alwaysApply: false
---
# Testing Guidelines

## Never Run TUI Applications

**CRITICAL: AI agents must never attempt to run the TUI application or any interactive terminal applications.**

### Restrictions
- **NEVER** run `cargo run --bin tui --features tui` or similar commands
- **NEVER** run any interactive terminal applications that require user input or navigation
- **NEVER** attempt to interact with Terminal User Interfaces
- The AI agent cannot navigate TUIs and this will cause timeouts or hanging processes

### Instead of Running TUI Applications
When making code changes, provide the user with:

1. **Compilation Check**: Run `cargo check --features tui` to ensure no errors
2. **Testing Instructions**: Give step-by-step instructions for the user to test the changes
3. **Expected Behavior**: Clearly describe what should happen when the user tests

### Testing Instructions Template
When providing testing instructions, use this format:

```
## Testing Instructions

### Build Check
First, ensure the code compiles:
```bash
cargo check --features tui
```

### Manual Testing Steps
1. Run the TUI application:
   ```bash
   cargo run --bin tui --features tui
   ```

2. Navigate to [specific screen/feature]
3. Test the specific functionality:
   - [Step-by-step actions]
   - [Expected behavior]
   - [How to verify the fix worked]

4. Exit the application with `Ctrl+C` or the quit command

### What to Look For
- [Specific behaviors to verify]
- [Error conditions that should be resolved]
- [Performance or usability improvements]
```

## Core Testing Policy

**IMPORTANT: Do not implement automated tests for TUI components, screens, or user interface elements.**

This project follows a focused testing strategy that separates concerns between the core SDK functionality and the TUI interface.

## What TO Test (SDK Core)

### Unit Tests
- **Client Operations**: All methods in [src/client.rs](mdc:src/client.rs)
- **Wallet Functions**: Key generation, signing, address derivation in [src/wallet.rs](mdc:src/wallet.rs)
- **Configuration**: Network settings and validation in [src/config.rs](mdc:src/config.rs)
- **Error Handling**: All error types and conversions in [src/error.rs](mdc:src/error.rs)
- **Business Logic**: Pool calculations, swap routing, fee calculations

### Integration Tests
- **Blockchain Integration**: Real network calls (with testnet)
- **Transaction Flows**: Complete swap/liquidity operations
- **Multi-hop Routing**: Complex swap paths
- **Error Scenarios**: Network failures, invalid inputs

## What NOT to Test (TUI Interface)

### Explicitly Excluded from Testing
- **Screen Rendering**: Any UI layout or visual components
- **Navigation Logic**: Tab switching, focus management
- **Event Handling**: Keyboard/mouse input processing
- **State Management**: TUI-specific state transitions
- **Component Behavior**: Dropdowns, tables, input fields

### Rationale for TUI Test Exclusion
1. **Complexity**: TUI testing requires complex terminal mocking
2. **Fragility**: UI tests break frequently with layout changes
3. **Manual Verification**: TUI functionality is better tested interactively
4. **Focus**: Resources better spent on core SDK reliability

## Testing Commands

```bash
# Run SDK tests only (recommended)
cargo test

# Run with blockchain features (for integration tests)
cargo test --features mock-blockchain

# Test specific SDK modules
cargo test client::tests
cargo test wallet::tests
cargo test config::tests
```

## Manual TUI Testing

Instead of automated TUI tests, use these manual testing approaches:

### Navigation Testing
1. Launch TUI: `cargo run --bin tui --features tui`
2. Test all navigation modes (Tab/Content)
3. Verify focus indicators work correctly
4. Test keyboard shortcuts (1-8, Tab, Enter, Esc)

### Functionality Testing
1. Test each screen's core functionality
2. Verify error handling and user feedback
3. Test edge cases with invalid inputs
4. Verify loading states and async operations

### Integration Testing
1. Test with real testnet connections
2. Verify blockchain operations work through TUI
3. Test wallet operations and transaction signing

## Development Workflow

When adding new features:

1. **SDK First**: Implement and test core functionality
2. **TUI Second**: Add TUI interface after SDK is tested
3. **Manual Verification**: Test TUI functionality interactively
4. **No TUI Tests**: Do not add automated TUI tests

## Error Handling in TUI

While we don't test TUI components, ensure proper error handling:

- Use centralized error types from [src/error.rs](mdc:src/error.rs)
- Display user-friendly error messages
- Implement proper loading states
- Handle async operation failures gracefully

This approach ensures robust SDK functionality while maintaining a responsive and reliable TUI interface.
