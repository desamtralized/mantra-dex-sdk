---
description: 
globs: 
alwaysApply: true
---
# TUI Architecture and Patterns

This project uses **ratatui 0.29.0** for terminal UI with a sophisticated architecture for managing state, events, and navigation.

## Core TUI Architecture

### Application State Management
The TUI uses a centralized state management pattern:

- **[src/tui/app.rs](mdc:src/tui/app.rs)** - Contains the `AppState` struct (2680 lines)
  - Manages current screen/view
  - Caches user balances and pool information
  - Handles loading states and error messages
  - Implements state transitions between screens

### Event System
Event handling is centralized and async-aware:

- **[src/tui/events.rs](mdc:src/tui/events.rs)** - Event processing system (929 lines)
  - Keyboard/mouse event handling
  - Navigation events (Tab, Enter, Esc, Arrow keys)
  - Action events (execute swap, provide liquidity)
  - Async event processing for blockchain operations

### UI Rendering
- **[src/tui/ui.rs](mdc:src/tui/ui.rs)** - Main UI rendering logic (499 lines)
  - Layout management
  - Component composition
  - Context-sensitive help text

## Navigation System

### Dual-Mode Navigation
The TUI implements a sophisticated two-level navigation system:

1. **Tab Mode** (`[TAB MODE]`):
   - Navigate between screens (1-8 number keys)
   - Tab/Shift+Tab for screen navigation
   - Press Enter to enter content mode

2. **Content Mode** (`[CONTENT MODE]`):
   - Navigate within screen elements
   - Tab/Shift+Tab for element focus
   - Esc to return to tab mode

### Focus Management
- **Global Focus Manager**: Unified focus system across all screens
- **Visual Indicators**: Yellow borders for focused elements
- **Color Coding**: Green for actions, Red for destructive actions

## Screen Structure

### Available Screens
1. **Dashboard** - Portfolio overview and stats
2. **Pools** - Pool listing and details
3. **Swap** - Token swapping interface
4. **Liquidity** - Provide/withdraw liquidity
5. **Rewards** - Claim rewards and epoch management
6. **Multi-hop** - Complex swap routing
7. **Admin** - Pool management and creation
8. **Settings** - Configuration and wallet management

### Screen Implementation Pattern
Each screen follows a consistent pattern:
- State management within the global AppState
- Event handling delegation
- Focus-aware rendering
- Validation and error handling

## Key Dependencies

From [Cargo.toml](mdc:Cargo.toml), the TUI uses:

```toml
ratatui = { version = "0.29.0", features = ["crossterm", "all-widgets"] }
crossterm = "0.28.1"
tokio-util = "0.7"
tui-input = "0.10"
chrono = "0.4"
```

## Development Status

See [RATATUI_TASKS.md](mdc:RATATUI_TASKS.md) for the comprehensive development roadmap and [FOCUS_FIXES.md](mdc:FOCUS_FIXES.md) for recent navigation improvements.

## Design Principles

1. **Modular**: Each screen and component is self-contained
2. **Async-Aware**: Blockchain operations don't block the UI
3. **User-Friendly**: Clear visual feedback and intuitive navigation
4. **Consistent**: Standardized focus indicators and keyboard shortcuts
5. **Responsive**: Real-time updates and loading states
